It should score the right number of pairs when equvillant button is pressed but should not score 
anything when the wrong buttom is pressed
 - As for now I don't know how to have on function for all buttons
 - instead I created a seperate function for all buttons
 - It should include keyboard button 0, 1, 2, 3, 4  
 This is done!!!

It should display the score for now later in the final it should be hidden
 - it shows first time whe display called in convert function 
 - then again count score 
 - therefore it keeps attaching to one after the other 
 - It should have hide and show function 

It should have a timer 
 This is the priority at the moment, once this is finished I can make it pretty!!!
 - what I am going to use the timer for? 
 - the length that the program runs
 - later on for possible shuffel system
 - could have start button the activated the convert() function
 - I would like a time that starts the program but the also finishes
 - after it finishes no more button can be pushed and score is shown 

It should not be able to refresh when when in actula test environment instead put you back to 
the start screen

The shuffel system needs re calibration not enough pairs
 - It should have at least one pair and max 4 but generally more that one
 - setInterval between array 
 - ['A', 'B'] ['a', 'b'] setInterval before the next shuffel beging ['C', 'D'] ['c', 'd'] and back
 - 

It should become an Anki style learning system 






The new shuffle system: 
 - It should use the wole alphabet
 - It should only use a letter once ++ that gone be interesting to implment
 - It should 0 to 4 equal in equal messures

 - new shuffle works in two functions one that creates equal random upper and lower creates
   the secound creates non equal upper and lowercase characters 

 - the second function has to have and if clausal that checks how man character are in 
   in the array from function randomEqual

   // if randomEqual === 0 then add 4 letter randomNotEqual
   // if randomEqual === 1 then add 3 letter randomNotEqual
   // if randomEqual === 2 then add 2 letter randomNotEqual
   // if randomEqual === 3 then add 1 letter randomNotEqual
   // if randomEqual === 4 then add 0 letter randomNotEqual

  - needs to swap characters in array otherwise the first is always equal as it's 
    the first to be pushed or when more equal ones they are in the front 

    - i could sort the arrays at the end
    - i could map the array and sort it some how that way 
    - to swap [arr[0], arr[1]] = [arr[1], arr[0]] waps first two elements in an array
    
  Finished so far maybe adjustments later  but for now I am happy with it.
    
    
